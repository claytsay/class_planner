{"version":3,"sources":["Utilities.js","data_example.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TimeBlock","start","end","Object","classCallCheck","this","createClass","key","value","timeBlock","isBefore","valueOf","isAfter","toDateString","makeTimeBlock","day","startTime","endTime","numDay","startTimeArr","split","map","x","parseInt","endTimeArr","startDate","Date","UTC","endDate","Courses","name","section","times","App","state","courses","react_default","a","createElement","src","logo","className","alt","App_Form","CourseList","data","Component","Course","props","_this2","possibleConstructorReturn","getPrototypeOf","call","toString","course","App_Course","Form","_this4","event","setState","target","preventDefault","console","log","onSubmit","handleSubmit","type","onChange","handleChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.73e341a8.chunk.js","sourcesContent":["/**\r\n * TimeBlock: Represents a block of time.\r\n */\r\nexport class TimeBlock {\r\n    /**\r\n     * Constructs a TimeBlock based on two Date objects that indicate start and end.\r\n     * @param {Date} start the start time of the block\r\n     * @param {Date} end the end time of the block\r\n     */\r\n    constructor(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    /**\r\n     * Determines if two TimeBlocks overlap with one another.\r\n     * @param {TimeBlock} timeBlock \r\n     */\r\n    overlapsWith(timeBlock) {\r\n        let isBefore = \r\n            this.start.valueOf() < timeBlock.start.valueOf() &&\r\n            this.end.valueOf() < timeBlock.start.valueOf();\r\n        let isAfter = \r\n            this.start.valueOf() > timeBlock.start.valueOf() &&\r\n            this.end.valueOf() > timeBlock.start.valueOf();\r\n        return isBefore || isAfter;\r\n    }\r\n\r\n    toString() {\r\n        return this.start.toDateString() + \" â€“ \" + this.end.toDateString();\r\n    }\r\n}\r\n\r\n/**\r\n * Makes a TimeBlock within a certain reference week.\r\n * Eases \"manual\" construction of TimeBlocks based on the\r\n * classes.berkeley.edu format of date/time. Should not be used\r\n * for reasons other than testing.\r\n * \r\n * TODO: Support Sunday and Saturday?\r\n * @param {string} day day of week that block occurs on (e.g. \"M\")\r\n * @param {string} startTime block start time in 24-hour format (e.g. \"13:00\")\r\n * @param {string} endTime block end time in 24-hour format\r\n */\r\nexport function makeTimeBlock(day, startTime, endTime) {\r\n    let numDay = 0;\r\n    switch (day) {\r\n        case \"M\":\r\n            numDay = 14;\r\n            break;\r\n        case \"Tu\":\r\n            numDay = 15;\r\n            break;\r\n        case \"W\":\r\n            numDay = 16;\r\n            break;\r\n        case \"Th\":\r\n            numDay = 17;\r\n            break;\r\n        case \"F\":\r\n            numDay = 18;\r\n            break;\r\n    }\r\n\r\n    let startTimeArr = startTime.split(\":\").map((x) => parseInt(x));\r\n    let endTimeArr = endTime.split(\":\").map((x) => parseInt(x));\r\n\r\n    let startDate = new Date(Date.UTC(2000, 7, numDay, startTimeArr[0], startTimeArr[1]));\r\n    let endDate = new Date(Date.UTC(2000, 7, numDay, endTimeArr[0], endTimeArr[1]));\r\n    \r\n    return new TimeBlock(startDate, endDate);\r\n}\r\n","import { TimeBlock, makeTimeBlock } from \"./Utilities.js\";\r\n\r\n/**\r\n * Sample data\r\n */\r\nexport const Courses = [\r\n  {\r\n    name: \"CHEM 4B\",\r\n    section: 1,\r\n    times: [\r\n      makeTimeBlock(\"M\", \"10:00\", \"10:59\"),\r\n      makeTimeBlock(\"W\", \"10:00\", \"10:59\"),\r\n      makeTimeBlock(\"F\", \"10:00\", \"10:59\")\r\n    ]\r\n  },\r\n  {\r\n    name: \"CHMENG 40\",\r\n    section: 1,\r\n    times: [\r\n      makeTimeBlock(\"Tu\", \"08:00\", \"08:59\")\r\n    ]\r\n  },\r\n  {\r\n    name: \"MATH 54\",\r\n    section: 1,\r\n    times: [\r\n      makeTimeBlock(\"M\", \"11:00\", \"11:59\"),\r\n      makeTimeBlock(\"W\", \"11:00\", \"11:59\"),\r\n      makeTimeBlock(\"F\", \"11:00\", \"11:59\")\r\n    ]\r\n  },\r\n  {\r\n    name: \"PHYSICS 7B\",\r\n    section: 3,\r\n    times: [\r\n      makeTimeBlock(\"M\", \"13:00\", \"13:59\"),\r\n      makeTimeBlock(\"W\", \"13:00\", \"13:59\"),\r\n      makeTimeBlock(\"F\", \"13:00\", \"13:59\")\r\n    ]\r\n  },\r\n  {\r\n    name: \"COMPSCI 61B\",\r\n    section: 1,\r\n    times: [\r\n      makeTimeBlock(\"M\", \"15:00\", \"15:59\"),\r\n      makeTimeBlock(\"W\", \"15:00\", \"15:59\"),\r\n      makeTimeBlock(\"F\", \"15:00\", \"15:59\")\r\n    ]\r\n  },\r\n  {\r\n    name: \"MATH 1B\",\r\n    section: 2,\r\n    times: [\r\n      makeTimeBlock(\"M\", \"11:00\", \"11:59\"),\r\n      makeTimeBlock(\"W\", \"11:00\", \"11:59\"),\r\n      makeTimeBlock(\"F\", \"11:00\", \"11:59\")\r\n    ]\r\n  }\r\n];\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Courses } from './data_example';\n\nclass App extends Component {\n  state = {\n    courses: [\n      \n    ]\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Form />\n        {CourseList({data: Courses})} \n      </div>\n    );\n  }\n}\n\n/**\n * Represents a Course and its times.\n */\nclass Course extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          <li>Name: {this.props.name.toString()}</li>\n          <li>Section: {this.props.section.toString()}</li>\n          <li>Time(s): {this.props.times.toString()}</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n\nconst CourseList = (props) => {\n  return (\n    <div>\n      {props.data.map((course) => <Course {...course} />)}\n    </div>\n  );\n}\n\nclass Button extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    }\n  }\n\n  handleClick = () => {\n    console.log(\"You clicked the button!\");\n    this.setState(\n      (previousState) => {\n        previousState.count++;\n        return previousState;\n      }\n    );\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.count}  \n      </button>\n    )\n  }\n}\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value})\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"Form submitted! \", this.state.value);\n  }\n  \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n          type=\"text\"\n          onChange={this.handleChange}\n          placeholder=\"CHEM 4B\"\n        />\n        <button type=\"submit\">Add Class</button>\n      </form>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.474b43d4.svg\";"],"sourceRoot":""}